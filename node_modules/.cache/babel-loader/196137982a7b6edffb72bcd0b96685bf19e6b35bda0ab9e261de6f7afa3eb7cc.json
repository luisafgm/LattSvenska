{"ast":null,"code":"const vocabulario = {\n  verbos: [{\n    palabraSue: \"Äta\",\n    palabraEsp: \"Comer\"\n  }, {\n    palabraSue: \"Dricka\",\n    palabraEsp: \"Beber\"\n  }, {\n    palabraSue: \"Sova\",\n    palabraEsp: \"Dormir\"\n  }, {\n    palabraSue: \"Springa\",\n    palabraEsp: \"Correr\"\n  }, {\n    palabraSue: \"Gå\",\n    palabraEsp: \"Caminar\"\n  }, {\n    palabraSue: \"Skriva\",\n    palabraEsp: \"Escribir\"\n  }, {\n    palabraSue: \"Läsa\",\n    palabraEsp: \"Leer\"\n  }, {\n    palabraSue: \"Tala\",\n    palabraEsp: \"Hablar\"\n  }, {\n    palabraSue: \"Lyssna\",\n    palabraEsp: \"Escuchar\"\n  }, {\n    palabraSue: \"Titta\",\n    palabraEsp: \"Mirar\"\n  }, {\n    palabraSue: \"Köpa\",\n    palabraEsp: \"Comprar\"\n  }, {\n    palabraSue: \"Sälja\",\n    palabraEsp: \"Vender\"\n  }, {\n    palabraSue: \"Vänta\",\n    palabraEsp: \"Esperar\"\n  }, {\n    palabraSue: \"Komma\",\n    palabraEsp: \"Venir\"\n  }, {\n    palabraSue: \"Åka\",\n    palabraEsp: \"Ir (en vehículo)\"\n  }, {\n    palabraSue: \"Köra\",\n    palabraEsp: \"Conducir\"\n  }, {\n    palabraSue: \"Bygga\",\n    palabraEsp: \"Construir\"\n  }, {\n    palabraSue: \"Arbeta\",\n    palabraEsp: \"Trabajar\"\n  }, {\n    palabraSue: \"Höra\",\n    palabraEsp: \"Oír\"\n  }, {\n    palabraSue: \"Mata\",\n    palabraEsp: \"Alimentar\"\n  }, {\n    palabraSue: \"Leva\",\n    palabraEsp: \"Vivir\"\n  }, {\n    palabraSue: \"Bo\",\n    palabraEsp: \"Habitar\"\n  }, {\n    palabraSue: \"Vara\",\n    palabraEsp: \"Ser/Estar\"\n  }, {\n    palabraSue: \"Göra\",\n    palabraEsp: \"Hacer\"\n  }, {\n    palabraSue: \"Älska\",\n    palabraEsp: \"Amar\"\n  }, {\n    palabraSue: \"Hata\",\n    palabraEsp: \"Odiar\"\n  }, {\n    palabraSue: \"Vinna\",\n    palabraEsp: \"Ganar\"\n  }, {\n    palabraSue: \"Förlora\",\n    palabraEsp: \"Perder\"\n  }, {\n    palabraSue: \"Skicka\",\n    palabraEsp: \"Enviar\"\n  }\n  // ... Añade más verbos hasta llegar a 300\n  ],\n  adjetivos: [{\n    palabraEsp: \"Rápido\",\n    palabraSue: \"Snabb\"\n  }, {\n    palabraEsp: \"Lento\",\n    palabraSue: \"Långsam\"\n  }, {\n    palabraEsp: \"Feliz\",\n    palabraSue: \"Glad\"\n  }, {\n    palabraEsp: \"Triste\",\n    palabraSue: \"Ledsen\"\n  }, {\n    palabraEsp: \"Grande\",\n    palabraSue: \"Stor\"\n  }],\n  palabrasImportantes: [{\n    palabraEsp: \"Hola\",\n    palabraSue: \"Hej\"\n  }, {\n    palabraEsp: \"Gracias\",\n    palabraSue: \"Tack\"\n  }, {\n    palabraEsp: \"Sí\",\n    palabraSue: \"Ja\"\n  }, {\n    palabraEsp: \"No\",\n    palabraSue: \"Nej\"\n  }, {\n    palabraEsp: \"Por favor\",\n    palabraSue: \"Snälla\"\n  }]\n};\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async categoria => {\n  try {\n    // Simulación de llamada a una API con un pequeño retraso\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(vocabulario[categoria] || []);\n      }, 500); // 0.5 segundos de retraso para simular la carga\n    });\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["vocabulario","verbos","palabraSue","palabraEsp","adjetivos","palabrasImportantes","obtenerPalabras","categoria","Promise","resolve","setTimeout","error","console"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["const vocabulario = {\n  verbos: [\n        { palabraSue: \"Äta\", palabraEsp: \"Comer\" },\n        { palabraSue: \"Dricka\", palabraEsp: \"Beber\" },\n        { palabraSue: \"Sova\", palabraEsp: \"Dormir\" },\n        { palabraSue: \"Springa\", palabraEsp: \"Correr\" },\n        { palabraSue: \"Gå\", palabraEsp: \"Caminar\" },\n        { palabraSue: \"Skriva\", palabraEsp: \"Escribir\" },\n        { palabraSue: \"Läsa\", palabraEsp: \"Leer\" },\n        { palabraSue: \"Tala\", palabraEsp: \"Hablar\" },\n        { palabraSue: \"Lyssna\", palabraEsp: \"Escuchar\" },\n        { palabraSue: \"Titta\", palabraEsp: \"Mirar\" },\n        { palabraSue: \"Köpa\", palabraEsp: \"Comprar\" },\n        { palabraSue: \"Sälja\", palabraEsp: \"Vender\" },\n        { palabraSue: \"Vänta\", palabraEsp: \"Esperar\" },\n        { palabraSue: \"Komma\", palabraEsp: \"Venir\" },\n        { palabraSue: \"Åka\", palabraEsp: \"Ir (en vehículo)\" },\n        { palabraSue: \"Köra\", palabraEsp: \"Conducir\" },\n        { palabraSue: \"Bygga\", palabraEsp: \"Construir\" },\n        { palabraSue: \"Arbeta\", palabraEsp: \"Trabajar\" },\n        { palabraSue: \"Höra\", palabraEsp: \"Oír\" },\n        { palabraSue: \"Mata\", palabraEsp: \"Alimentar\" },\n        { palabraSue: \"Leva\", palabraEsp: \"Vivir\" },\n        { palabraSue: \"Bo\", palabraEsp: \"Habitar\" },\n        { palabraSue: \"Vara\", palabraEsp: \"Ser/Estar\" },\n        { palabraSue: \"Göra\", palabraEsp: \"Hacer\" },\n        { palabraSue: \"Älska\", palabraEsp: \"Amar\" },\n        { palabraSue: \"Hata\", palabraEsp: \"Odiar\" },\n        { palabraSue: \"Vinna\", palabraEsp: \"Ganar\" },\n        { palabraSue: \"Förlora\", palabraEsp: \"Perder\" },\n        { palabraSue: \"Skicka\", palabraEsp: \"Enviar\" },\n        // ... Añade más verbos hasta llegar a 300\n    \n      \n  ],\n  adjetivos: [\n    { palabraEsp: \"Rápido\", palabraSue: \"Snabb\" },\n    { palabraEsp: \"Lento\", palabraSue: \"Långsam\" },\n    { palabraEsp: \"Feliz\", palabraSue: \"Glad\" },\n    { palabraEsp: \"Triste\", palabraSue: \"Ledsen\" },\n    { palabraEsp: \"Grande\", palabraSue: \"Stor\" }\n  ],\n  palabrasImportantes: [\n    { palabraEsp: \"Hola\", palabraSue: \"Hej\" },\n    { palabraEsp: \"Gracias\", palabraSue: \"Tack\" },\n    { palabraEsp: \"Sí\", palabraSue: \"Ja\" },\n    { palabraEsp: \"No\", palabraSue: \"Nej\" },\n    { palabraEsp: \"Por favor\", palabraSue: \"Snälla\" }\n  ]\n};\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async (categoria) => {\n  try {\n    // Simulación de llamada a una API con un pequeño retraso\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(vocabulario[categoria] || []);\n      }, 500); // 0.5 segundos de retraso para simular la carga\n    });\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG;EAClBC,MAAM,EAAE,CACF;IAAEC,UAAU,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC1C;IAAED,UAAU,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC7C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAS,CAAC,EAC5C;IAAED,UAAU,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAS,CAAC,EAC/C;IAAED,UAAU,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAU,CAAC,EAC3C;IAAED,UAAU,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAW,CAAC,EAChD;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAO,CAAC,EAC1C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAS,CAAC,EAC5C;IAAED,UAAU,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAW,CAAC,EAChD;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC5C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAU,CAAC,EAC7C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAS,CAAC,EAC7C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAU,CAAC,EAC9C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC5C;IAAED,UAAU,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAmB,CAAC,EACrD;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAW,CAAC,EAC9C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAY,CAAC,EAChD;IAAED,UAAU,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAW,CAAC,EAChD;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAM,CAAC,EACzC;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAY,CAAC,EAC/C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC3C;IAAED,UAAU,EAAE,IAAI;IAAEC,UAAU,EAAE;EAAU,CAAC,EAC3C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAY,CAAC,EAC/C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC3C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAO,CAAC,EAC3C;IAAED,UAAU,EAAE,MAAM;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC3C;IAAED,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC5C;IAAED,UAAU,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAS,CAAC,EAC/C;IAAED,UAAU,EAAE,QAAQ;IAAEC,UAAU,EAAE;EAAS;EAC7C;EAAA,CAGL;EACDC,SAAS,EAAE,CACT;IAAED,UAAU,EAAE,QAAQ;IAAED,UAAU,EAAE;EAAQ,CAAC,EAC7C;IAAEC,UAAU,EAAE,OAAO;IAAED,UAAU,EAAE;EAAU,CAAC,EAC9C;IAAEC,UAAU,EAAE,OAAO;IAAED,UAAU,EAAE;EAAO,CAAC,EAC3C;IAAEC,UAAU,EAAE,QAAQ;IAAED,UAAU,EAAE;EAAS,CAAC,EAC9C;IAAEC,UAAU,EAAE,QAAQ;IAAED,UAAU,EAAE;EAAO,CAAC,CAC7C;EACDG,mBAAmB,EAAE,CACnB;IAAEF,UAAU,EAAE,MAAM;IAAED,UAAU,EAAE;EAAM,CAAC,EACzC;IAAEC,UAAU,EAAE,SAAS;IAAED,UAAU,EAAE;EAAO,CAAC,EAC7C;IAAEC,UAAU,EAAE,IAAI;IAAED,UAAU,EAAE;EAAK,CAAC,EACtC;IAAEC,UAAU,EAAE,IAAI;IAAED,UAAU,EAAE;EAAM,CAAC,EACvC;IAAEC,UAAU,EAAE,WAAW;IAAED,UAAU,EAAE;EAAS,CAAC;AAErD,CAAC;;AAED;AACA,MAAMI,eAAe,GAAG,MAAOC,SAAS,IAAK;EAC3C,IAAI;IACF;IACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAACT,WAAW,CAACO,SAAS,CAAC,IAAI,EAAE,CAAC;MACvC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeL,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}