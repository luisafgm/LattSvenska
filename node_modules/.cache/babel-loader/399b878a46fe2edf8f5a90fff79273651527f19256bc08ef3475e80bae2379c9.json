{"ast":null,"code":"var _jsxFileName = \"/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/components/Vocabulario.js\",\n  _s = $RefreshSig$();\n// src/components/Vocabulario.js\nimport React, { useState, useEffect } from \"react\";\nimport Tarjeta from \"./Tarjeta\";\nimport obtenerPalabras from \"../services/vocabularioService\"; // Servicio para obtener datos\nimport \"./vocabulario.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vocabulario() {\n  _s();\n  const [palabras, setPalabras] = useState([]);\n  const [categoria, setCategoria] = useState(\"vocabulario\"); // Categoría inicial\n  const [loading, setLoading] = useState(false); // Indicador de carga\n  const [error, setError] = useState(null); // Manejo de errores\n\n  const COLUMNAS = 4; // Número de columnas por fila\n\n  // Cargar palabras según la categoría seleccionada\n  useEffect(() => {\n    const cargarPalabras = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const nuevasPalabras = await obtenerPalabras(categoria); // Obtener datos según la categoría\n        setPalabras(nuevasPalabras);\n      } catch (err) {\n        setError(\"Error al cargar las palabras. Inténtalo de nuevo.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    cargarPalabras();\n  }, [categoria]);\n\n  // Dividir las palabras en filas según el número de columnas\n  const dividirEnFilas = (data, columnasPorFila) => {\n    const filas = [];\n    for (let i = 0; i < data.length; i += columnasPorFila) {\n      filas.push(data.slice(i, i + columnasPorFila));\n    }\n    return filas;\n  };\n\n  // Renderizar el contenido de la categoría\n  const renderCategoria = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cargando\",\n        children: \"Cargando palabras...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    }\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n    if (palabras.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sin-datos\",\n        children: \"No hay palabras para mostrar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }, this);\n    }\n    const filasDePalabras = dividirEnFilas(palabras, COLUMNAS);\n    return filasDePalabras.map((fila, indexFila) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fila\",\n      children: fila.map((item, indexPalabra) => /*#__PURE__*/_jsxDEV(Tarjeta, {\n        palabraEsp: item.palabraEsp,\n        palabraSue: item.palabraSue\n      }, `${indexFila}-${indexPalabra}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, indexFila, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vocabulario-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"categoria-nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"vocabulario\"),\n        children: \"Vocabulario\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"verbos\"),\n        children: \"Verbos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"adjetivos\"),\n        children: \"Adjetivos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"ett eller en\"),\n        children: \"Ett o En\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"categoria-contenido\",\n      children: renderCategoria()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(Vocabulario, \"z0bmmU0npYtrVn4kqgT8kapqUYw=\");\n_c = Vocabulario;\nexport default Vocabulario;\nvar _c;\n$RefreshReg$(_c, \"Vocabulario\");","map":{"version":3,"names":["React","useState","useEffect","Tarjeta","obtenerPalabras","jsxDEV","_jsxDEV","Vocabulario","_s","palabras","setPalabras","categoria","setCategoria","loading","setLoading","error","setError","COLUMNAS","cargarPalabras","nuevasPalabras","err","dividirEnFilas","data","columnasPorFila","filas","i","length","push","slice","renderCategoria","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filasDePalabras","map","fila","indexFila","item","indexPalabra","palabraEsp","palabraSue","onClick","_c","$RefreshReg$"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/components/Vocabulario.js"],"sourcesContent":["// src/components/Vocabulario.js\nimport React, { useState, useEffect } from \"react\";\nimport Tarjeta from \"./Tarjeta\";\nimport obtenerPalabras from \"../services/vocabularioService\"; // Servicio para obtener datos\nimport \"./vocabulario.css\";\n\nfunction Vocabulario() {\n  const [palabras, setPalabras] = useState([]);\n  const [categoria, setCategoria] = useState(\"vocabulario\"); // Categoría inicial\n  const [loading, setLoading] = useState(false); // Indicador de carga\n  const [error, setError] = useState(null); // Manejo de errores\n\n  const COLUMNAS = 4; // Número de columnas por fila\n\n  // Cargar palabras según la categoría seleccionada\n  useEffect(() => {\n    const cargarPalabras = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const nuevasPalabras = await obtenerPalabras(categoria); // Obtener datos según la categoría\n        setPalabras(nuevasPalabras);\n      } catch (err) {\n        setError(\"Error al cargar las palabras. Inténtalo de nuevo.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    cargarPalabras();\n  }, [categoria]);\n\n  // Dividir las palabras en filas según el número de columnas\n  const dividirEnFilas = (data, columnasPorFila) => {\n    const filas = [];\n    for (let i = 0; i < data.length; i += columnasPorFila) {\n      filas.push(data.slice(i, i + columnasPorFila));\n    }\n    return filas;\n  };\n\n  // Renderizar el contenido de la categoría\n  const renderCategoria = () => {\n    if (loading) {\n      return <p className=\"cargando\">Cargando palabras...</p>;\n    }\n\n    if (error) {\n      return <p className=\"error\">{error}</p>;\n    }\n\n    if (palabras.length === 0) {\n      return <p className=\"sin-datos\">No hay palabras para mostrar.</p>;\n    }\n\n    const filasDePalabras = dividirEnFilas(palabras, COLUMNAS);\n\n    return filasDePalabras.map((fila, indexFila) => (\n      <div className=\"fila\" key={indexFila}>\n        {fila.map((item, indexPalabra) => (\n          <Tarjeta\n            key={`${indexFila}-${indexPalabra}`}\n            palabraEsp={item.palabraEsp}\n            palabraSue={item.palabraSue}\n          />\n        ))}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"vocabulario-container\">\n      <nav className=\"categoria-nav\">\n        <button onClick={() => setCategoria(\"vocabulario\")}>Vocabulario</button>\n        <button onClick={() => setCategoria(\"verbos\")}>Verbos</button>\n        <button onClick={() => setCategoria(\"adjetivos\")}>Adjetivos</button>\n        <button onClick={() => setCategoria(\"ett eller en\")}>Ett o En</button>\n      </nav>\n      <div className=\"categoria-contenido\">{renderCategoria()}</div>\n    </div>\n  );\n}\n\nexport default Vocabulario;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,gCAAgC,CAAC,CAAC;AAC9D,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C,MAAMgB,QAAQ,GAAG,CAAC,CAAC,CAAC;;EAEpB;EACAf,SAAS,CAAC,MAAM;IACd,MAAMgB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAMG,cAAc,GAAG,MAAMf,eAAe,CAACO,SAAS,CAAC,CAAC,CAAC;QACzDD,WAAW,CAACS,cAAc,CAAC;MAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZJ,QAAQ,CAAC,mDAAmD,CAAC;MAC/D,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDI,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMU,cAAc,GAAGA,CAACC,IAAI,EAAEC,eAAe,KAAK;IAChD,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,IAAIF,eAAe,EAAE;MACrDC,KAAK,CAACG,IAAI,CAACL,IAAI,CAACM,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAGF,eAAe,CAAC,CAAC;IAChD;IACA,OAAOC,KAAK;EACd,CAAC;;EAED;EACA,MAAMK,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIhB,OAAO,EAAE;MACX,oBAAOP,OAAA;QAAGwB,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACzD;IAEA,IAAIpB,KAAK,EAAE;MACT,oBAAOT,OAAA;QAAGwB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAEhB;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IACzC;IAEA,IAAI1B,QAAQ,CAACiB,MAAM,KAAK,CAAC,EAAE;MACzB,oBAAOpB,OAAA;QAAGwB,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAC;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnE;IAEA,MAAMC,eAAe,GAAGf,cAAc,CAACZ,QAAQ,EAAEQ,QAAQ,CAAC;IAE1D,OAAOmB,eAAe,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,SAAS,kBACzCjC,OAAA;MAAKwB,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBO,IAAI,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,YAAY,kBAC3BnC,OAAA,CAACH,OAAO;QAENuC,UAAU,EAAEF,IAAI,CAACE,UAAW;QAC5BC,UAAU,EAAEH,IAAI,CAACG;MAAW,GAFvB,GAAGJ,SAAS,IAAIE,YAAY,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGpC,CACF;IAAC,GAPuBI,SAAS;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQ/B,CACN,CAAC;EACJ,CAAC;EAED,oBACE7B,OAAA;IAAKwB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCzB,OAAA;MAAKwB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BzB,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,aAAa,CAAE;QAAAmB,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxE7B,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,QAAQ,CAAE;QAAAmB,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9D7B,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,WAAW,CAAE;QAAAmB,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpE7B,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,cAAc,CAAE;QAAAmB,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eACN7B,OAAA;MAAKwB,SAAS,EAAC,qBAAqB;MAAAC,QAAA,EAAEF,eAAe,CAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV;AAAC3B,EAAA,CA1EQD,WAAW;AAAAsC,EAAA,GAAXtC,WAAW;AA4EpB,eAAeA,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}