{"ast":null,"code":"import axios from \"axios\";\n\n// URL de la API de palabras aleatorias (ajusta el número de palabras según lo necesites)\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\";\n\n// URL de Google Translate API (asegúrate de agregar tu clave API en el endpoint)\nconst GOOGLE_TRANSLATE_API_URL = \"https://translation.googleapis.com/language/translate/v2\";\nconst GOOGLE_API_KEY = \"TU_CLAVE_API\"; // Reemplaza con tu clave API real\n\n// Función para traducir usando Google Translate API\nconst traducirPalabra = async (palabra, idiomaDestino = \"es\") => {\n  try {\n    const response = await axios.post(GOOGLE_TRANSLATE_API_URL, null, {\n      params: {\n        q: palabra,\n        target: idiomaDestino,\n        key: GOOGLE_API_KEY\n      }\n    });\n    return response.data.data.translations[0].translatedText;\n  } catch (error) {\n    console.error(\"Error al traducir la palabra:\", error);\n    return palabra; // Si hay error, devolvemos la palabra original\n  }\n};\n\n// Función para obtener palabras y categorizarlas\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Obtener traducciones en español\n    const palabrasConTraduccion = await Promise.all(palabras.map(async palabra => {\n      const traduccion = await traducirPalabra(palabra, \"es\"); // Traducir cada palabra al español\n      return {\n        sueco: palabra,\n        espanol: traduccion\n      }; // Retorna un objeto con palabra en sueco y su traducción\n    }));\n\n    // Simulación de subcategorías con traducción al español\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5)\n    };\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: []\n    };\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["axios","API_URL","GOOGLE_TRANSLATE_API_URL","GOOGLE_API_KEY","traducirPalabra","palabra","idiomaDestino","response","post","params","q","target","key","data","translations","translatedText","error","console","obtenerPalabras","get","palabras","palabrasConTraduccion","Promise","all","map","traduccion","sueco","espanol","palabrasPorCategoria","verbos","filter","endsWith","adjetivos","length","en_ett","startsWith","otros"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["import axios from \"axios\";\n\n// URL de la API de palabras aleatorias (ajusta el número de palabras según lo necesites)\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\";\n\n// URL de Google Translate API (asegúrate de agregar tu clave API en el endpoint)\nconst GOOGLE_TRANSLATE_API_URL = \"https://translation.googleapis.com/language/translate/v2\";\nconst GOOGLE_API_KEY = \"TU_CLAVE_API\";  // Reemplaza con tu clave API real\n\n// Función para traducir usando Google Translate API\nconst traducirPalabra = async (palabra, idiomaDestino = \"es\") => {\n  try {\n    const response = await axios.post(GOOGLE_TRANSLATE_API_URL, null, {\n      params: {\n        q: palabra,\n        target: idiomaDestino,\n        key: GOOGLE_API_KEY,\n      },\n    });\n    return response.data.data.translations[0].translatedText;\n  } catch (error) {\n    console.error(\"Error al traducir la palabra:\", error);\n    return palabra; // Si hay error, devolvemos la palabra original\n  }\n};\n\n// Función para obtener palabras y categorizarlas\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Obtener traducciones en español\n    const palabrasConTraduccion = await Promise.all(\n      palabras.map(async (palabra) => {\n        const traduccion = await traducirPalabra(palabra, \"es\"); // Traducir cada palabra al español\n        return { sueco: palabra, espanol: traduccion }; // Retorna un objeto con palabra en sueco y su traducción\n      })\n    );\n\n    // Simulación de subcategorías con traducción al español\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5),\n    };\n\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: [],\n    };\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,sDAAsD;;AAEtE;AACA,MAAMC,wBAAwB,GAAG,0DAA0D;AAC3F,MAAMC,cAAc,GAAG,cAAc,CAAC,CAAE;;AAExC;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,aAAa,GAAG,IAAI,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAACN,wBAAwB,EAAE,IAAI,EAAE;MAChEO,MAAM,EAAE;QACNC,CAAC,EAAEL,OAAO;QACVM,MAAM,EAAEL,aAAa;QACrBM,GAAG,EAAET;MACP;IACF,CAAC,CAAC;IACF,OAAOI,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAACC,cAAc;EAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAOX,OAAO,CAAC,CAAC;EAClB;AACF,CAAC;;AAED;AACA,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF;IACA,MAAMX,QAAQ,GAAG,MAAMP,KAAK,CAACmB,GAAG,CAAClB,OAAO,CAAC;IACzC,MAAMmB,QAAQ,GAAGb,QAAQ,CAACM,IAAI;;IAE9B;IACA,MAAMQ,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CH,QAAQ,CAACI,GAAG,CAAC,MAAOnB,OAAO,IAAK;MAC9B,MAAMoB,UAAU,GAAG,MAAMrB,eAAe,CAACC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;MACzD,OAAO;QAAEqB,KAAK,EAAErB,OAAO;QAAEsB,OAAO,EAAEF;MAAW,CAAC,CAAC,CAAC;IAClD,CAAC,CACH,CAAC;;IAED;IACA,MAAMG,oBAAoB,GAAG;MAC3BC,MAAM,EAAER,qBAAqB,CAACS,MAAM,CAACzB,OAAO,IAAIA,OAAO,CAACqB,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,IAAI1B,OAAO,CAACqB,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,IAAI1B,OAAO,CAACqB,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,CAAC;MAC7IC,SAAS,EAAEX,qBAAqB,CAACS,MAAM,CAACzB,OAAO,IAAIA,OAAO,CAACqB,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;MAC5EC,MAAM,EAAEb,qBAAqB,CAACS,MAAM,CAACzB,OAAO,IAAIA,OAAO,CAACqB,KAAK,CAACS,UAAU,CAAC,IAAI,CAAC,IAAI9B,OAAO,CAACqB,KAAK,CAACS,UAAU,CAAC,KAAK,CAAC,CAAC;MAClHC,KAAK,EAAEf,qBAAqB,CAACS,MAAM,CAACzB,OAAO,IAAI,EAAEA,OAAO,CAACqB,KAAK,CAACS,UAAU,CAAC,IAAI,CAAC,IAAI9B,OAAO,CAACqB,KAAK,CAACS,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI9B,OAAO,CAACqB,KAAK,CAACO,MAAM,IAAI,CAAC;IAClJ,CAAC;IAED,OAAOL,oBAAoB;EAC7B,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MACLa,MAAM,EAAE,EAAE;MACVG,SAAS,EAAE,EAAE;MACbE,MAAM,EAAE,EAAE;MACVE,KAAK,EAAE;IACT,CAAC;EACH;AACF,CAAC;AAED,eAAelB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}