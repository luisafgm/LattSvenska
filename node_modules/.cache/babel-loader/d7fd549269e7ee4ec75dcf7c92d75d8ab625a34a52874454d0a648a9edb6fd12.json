{"ast":null,"code":"var _jsxFileName = \"/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/components/Vocabulario.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tarjeta from \"./Tarjeta\";\nimport obtenerPalabras from \"../services/vocabularioService\"; // Servicio para obtener datos\nimport \"./vocabulario.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vocabulario() {\n  _s();\n  const [palabras, setPalabras] = useState([]);\n  const [categoria, setCategoria] = useState(\"vocabulario\");\n  const [loading, setLoading] = useState(true);\n  const COLUMNAS = 4; // Número de columnas por fila\n\n  // Cargar palabras según la categoría seleccionada\n  useEffect(() => {\n    const cargarPalabras = async () => {\n      setLoading(true); // Muestra el indicador de carga\n      const nuevasPalabras = await obtenerPalabras(categoria); // Obtener palabras según la categoría\n      setPalabras(nuevasPalabras);\n      setLoading(false); // Oculta el indicador de carga\n    };\n    cargarPalabras();\n  }, [categoria]);\n\n  // Dividir palabras en filas según el número de columnas\n  const dividirEnFilas = (data, columnasPorFila) => {\n    const filas = [];\n    for (let i = 0; i < data.length; i += columnasPorFila) {\n      filas.push(data.slice(i, i + columnasPorFila));\n    }\n    return filas;\n  };\n\n  // Renderizar el contenido de la categoría\n  const renderCategoria = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando palabras...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n    }\n    const filasDePalabras = dividirEnFilas(palabras, COLUMNAS);\n    return filasDePalabras.map((fila, indexFila) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fila\",\n      children: fila.map((item, indexPalabra) => /*#__PURE__*/_jsxDEV(Tarjeta, {\n        palabraEsp: item.palabraEsp // Cambia según el formato del API\n        ,\n        palabraSue: item.palabraSue // Cambia según el formato del API\n      }, `${indexFila}-${indexPalabra}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, indexFila, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vocabulario-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"categoria-nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"vocabulario\"),\n        children: \"Vocabulario\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"verbos\"),\n        children: \"Verbos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"adjetivos\"),\n        children: \"Adjetivos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCategoria(\"ett eller en\"),\n        children: \"Ett o En\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"categoria-contenido\",\n      children: renderCategoria()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(Vocabulario, \"fssB3nBDymoVvMIqLrXl5wAAjro=\");\n_c = Vocabulario;\nexport default Vocabulario;\nvar _c;\n$RefreshReg$(_c, \"Vocabulario\");","map":{"version":3,"names":["React","useState","useEffect","Tarjeta","obtenerPalabras","jsxDEV","_jsxDEV","Vocabulario","_s","palabras","setPalabras","categoria","setCategoria","loading","setLoading","COLUMNAS","cargarPalabras","nuevasPalabras","dividirEnFilas","data","columnasPorFila","filas","i","length","push","slice","renderCategoria","children","fileName","_jsxFileName","lineNumber","columnNumber","filasDePalabras","map","fila","indexFila","className","item","indexPalabra","palabraEsp","palabraSue","onClick","_c","$RefreshReg$"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/components/Vocabulario.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Tarjeta from \"./Tarjeta\";\nimport obtenerPalabras from \"../services/vocabularioService\"; // Servicio para obtener datos\nimport \"./vocabulario.css\";\n\nfunction Vocabulario() {\n  const [palabras, setPalabras] = useState([]);\n  const [categoria, setCategoria] = useState(\"vocabulario\");\n  const [loading, setLoading] = useState(true);\n\n  const COLUMNAS = 4; // Número de columnas por fila\n\n  // Cargar palabras según la categoría seleccionada\n  useEffect(() => {\n    const cargarPalabras = async () => {\n      setLoading(true); // Muestra el indicador de carga\n      const nuevasPalabras = await obtenerPalabras(categoria); // Obtener palabras según la categoría\n      setPalabras(nuevasPalabras);\n      setLoading(false); // Oculta el indicador de carga\n    };\n    cargarPalabras();\n  }, [categoria]);\n\n  // Dividir palabras en filas según el número de columnas\n  const dividirEnFilas = (data, columnasPorFila) => {\n    const filas = [];\n    for (let i = 0; i < data.length; i += columnasPorFila) {\n      filas.push(data.slice(i, i + columnasPorFila));\n    }\n    return filas;\n  };\n\n  // Renderizar el contenido de la categoría\n  const renderCategoria = () => {\n    if (loading) {\n      return <p>Cargando palabras...</p>;\n    }\n\n    const filasDePalabras = dividirEnFilas(palabras, COLUMNAS);\n\n    return filasDePalabras.map((fila, indexFila) => (\n      <div className=\"fila\" key={indexFila}>\n        {fila.map((item, indexPalabra) => (\n          <Tarjeta\n            key={`${indexFila}-${indexPalabra}`}\n            palabraEsp={item.palabraEsp} // Cambia según el formato del API\n            palabraSue={item.palabraSue} // Cambia según el formato del API\n          />\n        ))}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"vocabulario-container\">\n      <nav className=\"categoria-nav\">\n        <button onClick={() => setCategoria(\"vocabulario\")}>Vocabulario</button>\n        <button onClick={() => setCategoria(\"verbos\")}>Verbos</button>\n        <button onClick={() => setCategoria(\"adjetivos\")}>Adjetivos</button>\n        <button onClick={() => setCategoria(\"ett eller en\")}>Ett o En</button>\n      </nav>\n      <div className=\"categoria-contenido\">{renderCategoria()}</div>\n    </div>\n  );\n}\n\nexport default Vocabulario;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}