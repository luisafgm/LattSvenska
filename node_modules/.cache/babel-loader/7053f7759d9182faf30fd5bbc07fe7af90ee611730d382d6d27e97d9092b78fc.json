{"ast":null,"code":"const vocabulario = {\n  verbos: [],\n  palabrasImportantes: [{\n    palabraSue: \"Hej\",\n    palabraEsp: \"Hola\"\n  }, {\n    palabraSue: \"Tack\",\n    palabraEsp: \"Gracias\"\n  }, {\n    palabraSue: \"Ja\",\n    palabraEsp: \"Sí\"\n  }, {\n    palabraSue: \"Nej\",\n    palabraEsp: \"No\"\n  }, {\n    palabraSue: \"Snälla\",\n    palabraEsp: \"Por favor\"\n  }, {\n    palabraSue: \"Förlåt\",\n    palabraEsp: \"Perdón\"\n  }, {\n    palabraSue: \"Ursäkta\",\n    palabraEsp: \"Disculpe\"\n  }, {\n    palabraSue: \"God morgon\",\n    palabraEsp: \"Buenos días\"\n  }, {\n    palabraSue: \"God natt\",\n    palabraEsp: \"Buenas noches\"\n  }, {\n    palabraSue: \"Adjö\",\n    palabraEsp: \"Adiós\"\n  }, {\n    palabraSue: \"Vänligen\",\n    palabraEsp: \"Amablemente\"\n  }, {\n    palabraSue: \"Varför\",\n    palabraEsp: \"Por qué\"\n  }, {\n    palabraSue: \"Hur\",\n    palabraEsp: \"Cómo\"\n  }, {\n    palabraSue: \"När\",\n    palabraEsp: \"Cuándo\"\n  }, {\n    palabraSue: \"Var\",\n    palabraEsp: \"Dónde\"\n  }, {\n    palabraSue: \"Vad\",\n    palabraEsp: \"Qué\"\n  }, {\n    palabraSue: \"Vem\",\n    palabraEsp: \"Quién\"\n  }, {\n    palabraSue: \"Vilken\",\n    palabraEsp: \"Cuál\"\n  }, {\n    palabraSue: \"Och\",\n    palabraEsp: \"Y\"\n  }, {\n    palabraSue: \"Eller\",\n    palabraEsp: \"O\"\n  }, {\n    palabraSue: \"Men\",\n    palabraEsp: \"Pero\"\n  }, {\n    palabraSue: \"Så\",\n    palabraEsp: \"Entonces\"\n  }, {\n    palabraSue: \"Här\",\n    palabraEsp: \"Aquí\"\n  }, {\n    palabraSue: \"Där\",\n    palabraEsp: \"Allí\"\n  }, {\n    palabraSue: \"Alltid\",\n    palabraEsp: \"Siempre\"\n  }, {\n    palabraSue: \"Aldrig\",\n    palabraEsp: \"Nunca\"\n  }, {\n    palabraSue: \"Kanske\",\n    palabraEsp: \"Quizás\"\n  }, {\n    palabraSue: \"Redan\",\n    palabraEsp: \"Ya\"\n  }, {\n    palabraSue: \"Ofta\",\n    palabraEsp: \"A menudo\"\n  }, {\n    palabraSue: \"Sällan\",\n    palabraEsp: \"Rara vez\"\n  }\n  // ... Añade más palabras importantes hasta llegar a 300\n  ]\n};\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async categoria => {\n  try {\n    // Simulación de llamada a una API con un pequeño retraso\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(vocabulario[categoria] || []);\n      }, 1500); // 0.5 segundos de retraso para simular la carga\n    });\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["vocabulario","verbos","palabrasImportantes","palabraSue","palabraEsp","obtenerPalabras","categoria","Promise","resolve","setTimeout","error","console"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["const vocabulario = {\n  verbos: [\n    \n  ],\n  palabrasImportantes: [\n        { palabraSue: \"Hej\", palabraEsp: \"Hola\" },\n        { palabraSue: \"Tack\", palabraEsp: \"Gracias\" },\n        { palabraSue: \"Ja\", palabraEsp: \"Sí\" },\n        { palabraSue: \"Nej\", palabraEsp: \"No\" },\n        { palabraSue: \"Snälla\", palabraEsp: \"Por favor\" },\n        { palabraSue: \"Förlåt\", palabraEsp: \"Perdón\" },\n        { palabraSue: \"Ursäkta\", palabraEsp: \"Disculpe\" },\n        { palabraSue: \"God morgon\", palabraEsp: \"Buenos días\" },\n        { palabraSue: \"God natt\", palabraEsp: \"Buenas noches\" },\n        { palabraSue: \"Adjö\", palabraEsp: \"Adiós\" },\n        { palabraSue: \"Vänligen\", palabraEsp: \"Amablemente\" },\n        { palabraSue: \"Varför\", palabraEsp: \"Por qué\" },\n        { palabraSue: \"Hur\", palabraEsp: \"Cómo\" },\n        { palabraSue: \"När\", palabraEsp: \"Cuándo\" },\n        { palabraSue: \"Var\", palabraEsp: \"Dónde\" },\n        { palabraSue: \"Vad\", palabraEsp: \"Qué\" },\n        { palabraSue: \"Vem\", palabraEsp: \"Quién\" },\n        { palabraSue: \"Vilken\", palabraEsp: \"Cuál\" },\n        { palabraSue: \"Och\", palabraEsp: \"Y\" },\n        { palabraSue: \"Eller\", palabraEsp: \"O\" },\n        { palabraSue: \"Men\", palabraEsp: \"Pero\" },\n        { palabraSue: \"Så\", palabraEsp: \"Entonces\" },\n        { palabraSue: \"Här\", palabraEsp: \"Aquí\" },\n        { palabraSue: \"Där\", palabraEsp: \"Allí\" },\n        { palabraSue: \"Alltid\", palabraEsp: \"Siempre\" },\n        { palabraSue: \"Aldrig\", palabraEsp: \"Nunca\" },\n        { palabraSue: \"Kanske\", palabraEsp: \"Quizás\" },\n        { palabraSue: \"Redan\", palabraEsp: \"Ya\" },\n        { palabraSue: \"Ofta\", palabraEsp: \"A menudo\" },\n        { palabraSue: \"Sällan\", palabraEsp: \"Rara vez\" },\n        // ... Añade más palabras importantes hasta llegar a 300\n      ]\n      \n};\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async (categoria) => {\n  try {\n    // Simulación de llamada a una API con un pequeño retraso\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(vocabulario[categoria] || []);\n      }, 1500); // 0.5 segundos de retraso para simular la carga\n    });\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}