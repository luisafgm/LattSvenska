{"ast":null,"code":"import axios from \"axios\";\n\n// URL de la API para obtener palabras aleatorias\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\"; // Ajusta el número de palabras\n\n// Tu clave de API de Yandex (reemplaza con tu clave real)\nconst YANDEX_API_KEY = \"TU_CLAVE_DE_API_YANDEX\"; // Obtén esta clave al registrarte\n\n// URL de Yandex Translate\nconst TRANSLATE_API_URL = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${YANDEX_API_KEY}`;\n\n// Función para traducir la palabra de sueco a español usando Yandex\nconst traducirPalabra = async palabraSueco => {\n  console.log(\"Traduciendo palabra:\", palabraSueco); // Log para ver qué palabra se está traduciendo\n  try {\n    const response = await axios.post(TRANSLATE_API_URL, null, {\n      params: {\n        text: palabraSueco,\n        lang: \"sv|es\" // de sueco a español\n      }\n    });\n    if (response.data && response.data.text) {\n      console.log(\"Traducción obtenida:\", response.data.text[0]); // Log para ver la traducción\n      return response.data.text[0]; // Retorna la traducción\n    } else {\n      throw new Error(\"No se encontró traducción.\");\n    }\n  } catch (error) {\n    console.error(\"Error al traducir palabra:\", error);\n    return \"Traducción no disponible\"; // Si no hay traducción, retorna este mensaje\n  }\n};\n\n// Función para obtener palabras y sus traducciones\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Crear un array de palabras con su traducción\n    const palabrasConTraduccion = await Promise.all(palabras.map(async palabra => {\n      const traduccion = await traducirPalabra(palabra);\n      return {\n        sueco: palabra,\n        espanol: traduccion // Aquí se agrega la traducción al español\n      };\n    }));\n\n    // Categorizar las palabras en subcategorías\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5)\n    };\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: []\n    };\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["axios","API_URL","YANDEX_API_KEY","TRANSLATE_API_URL","traducirPalabra","palabraSueco","console","log","response","post","params","text","lang","data","Error","error","obtenerPalabras","get","palabras","palabrasConTraduccion","Promise","all","map","palabra","traduccion","sueco","espanol","palabrasPorCategoria","verbos","filter","endsWith","adjetivos","length","en_ett","startsWith","otros"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["import axios from \"axios\";\n\n// URL de la API para obtener palabras aleatorias\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\"; // Ajusta el número de palabras\n\n// Tu clave de API de Yandex (reemplaza con tu clave real)\nconst YANDEX_API_KEY = \"TU_CLAVE_DE_API_YANDEX\";  // Obtén esta clave al registrarte\n\n// URL de Yandex Translate\nconst TRANSLATE_API_URL = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${YANDEX_API_KEY}`;\n\n// Función para traducir la palabra de sueco a español usando Yandex\nconst traducirPalabra = async (palabraSueco) => {\n  console.log(\"Traduciendo palabra:\", palabraSueco);  // Log para ver qué palabra se está traduciendo\n  try {\n    const response = await axios.post(TRANSLATE_API_URL, null, {\n      params: {\n        text: palabraSueco,\n        lang: \"sv|es\", // de sueco a español\n      },\n    });\n\n    if (response.data && response.data.text) {\n      console.log(\"Traducción obtenida:\", response.data.text[0]);  // Log para ver la traducción\n      return response.data.text[0];  // Retorna la traducción\n    } else {\n      throw new Error(\"No se encontró traducción.\");\n    }\n  } catch (error) {\n    console.error(\"Error al traducir palabra:\", error);\n    return \"Traducción no disponible\";  // Si no hay traducción, retorna este mensaje\n  }\n};\n\n// Función para obtener palabras y sus traducciones\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Crear un array de palabras con su traducción\n    const palabrasConTraduccion = await Promise.all(\n      palabras.map(async (palabra) => {\n        const traduccion = await traducirPalabra(palabra);\n        return {\n          sueco: palabra,\n          espanol: traduccion, // Aquí se agrega la traducción al español\n        };\n      })\n    );\n\n    // Categorizar las palabras en subcategorías\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5),\n    };\n\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: [],\n    };\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}