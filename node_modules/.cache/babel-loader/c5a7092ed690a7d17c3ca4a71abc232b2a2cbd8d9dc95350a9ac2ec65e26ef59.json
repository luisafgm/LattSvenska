{"ast":null,"code":"// src/services/vocabularioService.js\nimport axios from \"axios\";\n\n// Simulación de una API que devuelve palabras categorizadas\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\"; // Ajusta el número de palabras\n\nconst obtenerPalabras = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Simulación de subcategorías (esto debe adaptarse según la API real)\n    const palabrasPorCategoria = {\n      verbos: palabras.filter(palabra => palabra.endsWith('ar') || palabra.endsWith('er') || palabra.endsWith('ir')),\n      // Verbos en sueco (ejemplo)\n      adjetivos: palabras.filter(palabra => palabra.length > 5),\n      // Adjetivos largos (ejemplo)\n      en_ett: palabras.filter(palabra => palabra.startsWith('en') || palabra.startsWith('ett')),\n      // Palabras con \"en\" o \"ett\"\n      otros: palabras.filter(palabra => !palabra.startsWith('en') && !palabra.startsWith('ett') && palabra.length <= 5)\n    };\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: []\n    };\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["axios","API_URL","obtenerPalabras","response","get","palabras","data","palabrasPorCategoria","verbos","filter","palabra","endsWith","adjetivos","length","en_ett","startsWith","otros","error","console"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["// src/services/vocabularioService.js\nimport axios from \"axios\";\n\n// Simulación de una API que devuelve palabras categorizadas\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\";  // Ajusta el número de palabras\n\nconst obtenerPalabras = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Simulación de subcategorías (esto debe adaptarse según la API real)\n    const palabrasPorCategoria = {\n      verbos: palabras.filter(palabra => palabra.endsWith('ar') || palabra.endsWith('er') || palabra.endsWith('ir')), // Verbos en sueco (ejemplo)\n      adjetivos: palabras.filter(palabra => palabra.length > 5), // Adjetivos largos (ejemplo)\n      en_ett: palabras.filter(palabra => palabra.startsWith('en') || palabra.startsWith('ett')), // Palabras con \"en\" o \"ett\"\n      otros: palabras.filter(palabra => !palabra.startsWith('en') && !palabra.startsWith('ett') && palabra.length <= 5)\n    };\n\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: []\n    };\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,sDAAsD,CAAC,CAAE;;AAEzE,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,OAAO,CAAC;IACzC,MAAMI,QAAQ,GAAGF,QAAQ,CAACG,IAAI;;IAE9B;IACA,MAAMC,oBAAoB,GAAG;MAC3BC,MAAM,EAAEH,QAAQ,CAACI,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAID,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAID,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,CAAC;MAAE;MAChHC,SAAS,EAAEP,QAAQ,CAACI,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC;MAAE;MAC3DC,MAAM,EAAET,QAAQ,CAACI,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACK,UAAU,CAAC,IAAI,CAAC,IAAIL,OAAO,CAACK,UAAU,CAAC,KAAK,CAAC,CAAC;MAAE;MAC3FC,KAAK,EAAEX,QAAQ,CAACI,MAAM,CAACC,OAAO,IAAI,CAACA,OAAO,CAACK,UAAU,CAAC,IAAI,CAAC,IAAI,CAACL,OAAO,CAACK,UAAU,CAAC,KAAK,CAAC,IAAIL,OAAO,CAACG,MAAM,IAAI,CAAC;IAClH,CAAC;IAED,OAAON,oBAAoB;EAC7B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MACLT,MAAM,EAAE,EAAE;MACVI,SAAS,EAAE,EAAE;MACbE,MAAM,EAAE,EAAE;MACVE,KAAK,EAAE;IACT,CAAC;EACH;AACF,CAAC;AAED,eAAed,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}