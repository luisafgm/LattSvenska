{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"https://api.datamuse.com/words\"; // Ejemplo con Datamuse (modifica según tu API)\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async categoria => {\n  try {\n    // Crea parámetros según la categoría\n    let params;\n    if (categoria === \"verbos\") {\n      params = {\n        ml: \"verb\",\n        topics: \"Swedish\"\n      }; // Palabras relacionadas con verbos en sueco\n    } else if (categoria === \"adjetivos\") {\n      params = {\n        ml: \"adjective\",\n        topics: \"Swedish\"\n      }; // Adjetivos en sueco\n    } else if (categoria === \"ett eller en\") {\n      params = {\n        ml: \"common\",\n        topics: \"Swedish grammar\"\n      }; // Ett o En\n    } else {\n      params = {\n        ml: \"common\",\n        topics: \"Swedish\"\n      }; // Palabras generales\n    }\n    const response = await axios.get(API_URL, {\n      params\n    });\n\n    // La API devuelve datos, adaptamos al formato esperado:\n    return response.data.map(item => ({\n      palabraSue: item.word,\n      // Ajusta según la estructura de datos de la API\n      palabraEsp: \"Traducción pendiente\" // Sustituye si tienes traducciones\n    }));\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["axios","API_URL","obtenerPalabras","categoria","params","ml","topics","response","get","data","map","item","palabraSue","word","palabraEsp","error","console"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"https://api.datamuse.com/words\"; // Ejemplo con Datamuse (modifica según tu API)\n\n// Función para obtener palabras según la categoría\nconst obtenerPalabras = async (categoria) => {\n  try {\n    // Crea parámetros según la categoría\n    let params;\n    if (categoria === \"verbos\") {\n      params = { ml: \"verb\", topics: \"Swedish\" }; // Palabras relacionadas con verbos en sueco\n    } else if (categoria === \"adjetivos\") {\n      params = { ml: \"adjective\", topics: \"Swedish\" }; // Adjetivos en sueco\n    } else if (categoria === \"ett eller en\") {\n      params = { ml: \"common\", topics: \"Swedish grammar\" }; // Ett o En\n    } else {\n      params = { ml: \"common\", topics: \"Swedish\" }; // Palabras generales\n    }\n\n    const response = await axios.get(API_URL, { params });\n\n    // La API devuelve datos, adaptamos al formato esperado:\n    return response.data.map((item) => ({\n      palabraSue: item.word, // Ajusta según la estructura de datos de la API\n      palabraEsp: \"Traducción pendiente\" // Sustituye si tienes traducciones\n    }));\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    throw error;\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC,CAAC,CAAC;;AAElD;AACA,MAAMC,eAAe,GAAG,MAAOC,SAAS,IAAK;EAC3C,IAAI;IACF;IACA,IAAIC,MAAM;IACV,IAAID,SAAS,KAAK,QAAQ,EAAE;MAC1BC,MAAM,GAAG;QAAEC,EAAE,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC,CAAC;IAC9C,CAAC,MAAM,IAAIH,SAAS,KAAK,WAAW,EAAE;MACpCC,MAAM,GAAG;QAAEC,EAAE,EAAE,WAAW;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC,CAAC;IACnD,CAAC,MAAM,IAAIH,SAAS,KAAK,cAAc,EAAE;MACvCC,MAAM,GAAG;QAAEC,EAAE,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAkB,CAAC,CAAC,CAAC;IACxD,CAAC,MAAM;MACLF,MAAM,GAAG;QAAEC,EAAE,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC,CAAC;IAChD;IAEA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,OAAO,EAAE;MAAEG;IAAO,CAAC,CAAC;;IAErD;IACA,OAAOG,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;MAClCC,UAAU,EAAED,IAAI,CAACE,IAAI;MAAE;MACvBC,UAAU,EAAE,sBAAsB,CAAC;IACrC,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}