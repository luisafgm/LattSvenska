{"ast":null,"code":"import axios from \"axios\";\n\n// URL de la API de palabras aleatorias\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\";\n\n// Diccionario predefinido con traducciones al español\nconst diccionario = {\n  \"hej\": \"hola\",\n  \"tack\": \"gracias\",\n  \"hej då\": \"adiós\",\n  \"bok\": \"libro\",\n  \"hund\": \"perro\",\n  \"katt\": \"gato\",\n  \"bord\": \"mesa\",\n  \"stol\": \"silla\",\n  \"äpple\": \"manzana\",\n  \"fönster\": \"ventana\",\n  \"bil\": \"coche\"\n  // Añadir más palabras aquí...\n};\n\n// Función para obtener la traducción de la palabra en español\nconst obtenerTraduccion = palabra => {\n  return diccionario[palabra.toLowerCase()] || \"Traducción no disponible\";\n};\n\n// Función principal para obtener palabras de la API y asignarles categorías\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Crear un array de palabras con su traducción\n    const palabrasConTraduccion = palabras.map(palabra => ({\n      sueco: palabra,\n      espanol: obtenerTraduccion(palabra) // Aquí se agrega la traducción al español\n    }));\n\n    // Categorizar las palabras en subcategorías\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5)\n    };\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: []\n    };\n  }\n};\nexport default obtenerPalabras;","map":{"version":3,"names":["axios","API_URL","diccionario","obtenerTraduccion","palabra","toLowerCase","obtenerPalabras","response","get","palabras","data","palabrasConTraduccion","map","sueco","espanol","palabrasPorCategoria","verbos","filter","endsWith","adjetivos","length","en_ett","startsWith","otros","error","console"],"sources":["/Users/Luisa/src/github.com/luisafgm/estudio-sueco/src/services/vocabularioService.js"],"sourcesContent":["import axios from \"axios\";\n\n// URL de la API de palabras aleatorias\nconst API_URL = \"https://random-word-api.herokuapp.com/word?number=50\";\n\n// Diccionario predefinido con traducciones al español\nconst diccionario = {\n  \"hej\": \"hola\",\n  \"tack\": \"gracias\",\n  \"hej då\": \"adiós\",\n  \"bok\": \"libro\",\n  \"hund\": \"perro\",\n  \"katt\": \"gato\",\n  \"bord\": \"mesa\",\n  \"stol\": \"silla\",\n  \"äpple\": \"manzana\",\n  \"fönster\": \"ventana\",\n  \"bil\": \"coche\",\n  // Añadir más palabras aquí...\n};\n\n// Función para obtener la traducción de la palabra en español\nconst obtenerTraduccion = (palabra) => {\n  return diccionario[palabra.toLowerCase()] || \"Traducción no disponible\";\n};\n\n// Función principal para obtener palabras de la API y asignarles categorías\nconst obtenerPalabras = async () => {\n  try {\n    // Obtener palabras aleatorias\n    const response = await axios.get(API_URL);\n    const palabras = response.data;\n\n    // Crear un array de palabras con su traducción\n    const palabrasConTraduccion = palabras.map(palabra => ({\n      sueco: palabra,\n      espanol: obtenerTraduccion(palabra), // Aquí se agrega la traducción al español\n    }));\n\n    // Categorizar las palabras en subcategorías\n    const palabrasPorCategoria = {\n      verbos: palabrasConTraduccion.filter(palabra => palabra.sueco.endsWith('ar') || palabra.sueco.endsWith('er') || palabra.sueco.endsWith('ir')),\n      adjetivos: palabrasConTraduccion.filter(palabra => palabra.sueco.length > 5),\n      en_ett: palabrasConTraduccion.filter(palabra => palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')),\n      otros: palabrasConTraduccion.filter(palabra => !(palabra.sueco.startsWith('en') || palabra.sueco.startsWith('ett')) && palabra.sueco.length <= 5),\n    };\n\n    return palabrasPorCategoria;\n  } catch (error) {\n    console.error(\"Error al obtener palabras:\", error);\n    return {\n      verbos: [],\n      adjetivos: [],\n      en_ett: [],\n      otros: [],\n    };\n  }\n};\n\nexport default obtenerPalabras;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,sDAAsD;;AAEtE;AACA,MAAMC,WAAW,GAAG;EAClB,KAAK,EAAE,MAAM;EACb,MAAM,EAAE,SAAS;EACjB,QAAQ,EAAE,OAAO;EACjB,KAAK,EAAE,OAAO;EACd,MAAM,EAAE,OAAO;EACf,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,MAAM;EACd,MAAM,EAAE,OAAO;EACf,OAAO,EAAE,SAAS;EAClB,SAAS,EAAE,SAAS;EACpB,KAAK,EAAE;EACP;AACF,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAIC,OAAO,IAAK;EACrC,OAAOF,WAAW,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,0BAA0B;AACzE,CAAC;;AAED;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,OAAO,CAAC;IACzC,MAAMQ,QAAQ,GAAGF,QAAQ,CAACG,IAAI;;IAE9B;IACA,MAAMC,qBAAqB,GAAGF,QAAQ,CAACG,GAAG,CAACR,OAAO,KAAK;MACrDS,KAAK,EAAET,OAAO;MACdU,OAAO,EAAEX,iBAAiB,CAACC,OAAO,CAAC,CAAE;IACvC,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMW,oBAAoB,GAAG;MAC3BC,MAAM,EAAEL,qBAAqB,CAACM,MAAM,CAACb,OAAO,IAAIA,OAAO,CAACS,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,IAAId,OAAO,CAACS,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,IAAId,OAAO,CAACS,KAAK,CAACK,QAAQ,CAAC,IAAI,CAAC,CAAC;MAC7IC,SAAS,EAAER,qBAAqB,CAACM,MAAM,CAACb,OAAO,IAAIA,OAAO,CAACS,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC;MAC5EC,MAAM,EAAEV,qBAAqB,CAACM,MAAM,CAACb,OAAO,IAAIA,OAAO,CAACS,KAAK,CAACS,UAAU,CAAC,IAAI,CAAC,IAAIlB,OAAO,CAACS,KAAK,CAACS,UAAU,CAAC,KAAK,CAAC,CAAC;MAClHC,KAAK,EAAEZ,qBAAqB,CAACM,MAAM,CAACb,OAAO,IAAI,EAAEA,OAAO,CAACS,KAAK,CAACS,UAAU,CAAC,IAAI,CAAC,IAAIlB,OAAO,CAACS,KAAK,CAACS,UAAU,CAAC,KAAK,CAAC,CAAC,IAAIlB,OAAO,CAACS,KAAK,CAACO,MAAM,IAAI,CAAC;IAClJ,CAAC;IAED,OAAOL,oBAAoB;EAC7B,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MACLR,MAAM,EAAE,EAAE;MACVG,SAAS,EAAE,EAAE;MACbE,MAAM,EAAE,EAAE;MACVE,KAAK,EAAE;IACT,CAAC;EACH;AACF,CAAC;AAED,eAAejB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}